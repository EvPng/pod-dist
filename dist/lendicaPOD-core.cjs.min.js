'use strict';
/*
Default config for LendicaPOD.
*/

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var DefaultConfig = {
  type: 'banner',
  compact: false
};
/*
Default display content for LendicaPOD.
*/

var DefaultDisplay = {
  link: "here at Lendica",
  before: "Thinking about expansion? Working capital available ",
  after: ".",
  partnerSlug: null,
  prequalResult: null,
  referenceCode: null
};

var LendicaPOD = /*#__PURE__*/function () {
  function LendicaPOD(element, config) {
    _classCallCheck(this, LendicaPOD);

    this.element = typeof element === 'string' ? document.querySelector(element) : element;
    this.config = config ? Object.assign(DefaultConfig, config) : DefaultConfig;
    this.initialized = false;
    this.display = DefaultDisplay;
    this.href = 'https://apply.golendica.com';
  }

  _createClass(LendicaPOD, [{
    key: "init",
    value: function init() {
      if (this.initialized) {
        return;
      }

      this.loadData('http://127.0.0.1:8000/api/pod/content', {
        // partnerDomain: window.location.hostname
        partnerDomain: "highpuritynaturalproducts.com",
        prequalData: this.config.prequal || null,
        underwritingData: this.config.underwrite || null
      });
    }
  }, {
    key: "loadData",
    value: function () {
      var _loadData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, payload) {
        var _this = this;

        var dataHeaders, iv, key, jwe, res, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dataHeaders = new Headers();
                dataHeaders.append("Content-Type", "application/json");
                iv = crypto.getRandomValues(new Uint8Array(12));
                _context.next = 5;
                return this.generateAES();

              case 5:
                key = _context.sent;
                _context.t0 = console;
                _context.next = 9;
                return crypto.subtle.exportKey('raw', key);

              case 9:
                _context.t1 = _context.sent;

                _context.t0.log.call(_context.t0, _context.t1);

                _context.t2 = console;
                _context.next = 14;
                return crypto.subtle.exportKey('jwk', key);

              case 14:
                _context.t3 = _context.sent;

                _context.t2.log.call(_context.t2, _context.t3);

                _context.next = 18;
                return this.encryptJson({
                  name: "AES-GCM",
                  iv: iv
                }, key, payload);

              case 18:
                jwe = _context.sent;
                console.log(jwe);
                _context.next = 22;
                return this.decryptJson({
                  name: "AES-GCM",
                  iv: iv
                }, key, jwe);

              case 22:
                res = _context.sent;
                console.log(res);
                _context.prev = 24;
                _context.next = 27;
                return fetch(url, {
                  method: 'POST',
                  headers: dataHeaders,
                  body: JSON.stringify(payload) // credentials: 'include',
                  // redirect: 'follow'

                });

              case 27:
                response = _context.sent;

                if (response.ok) {
                  _context.next = 31;
                  break;
                }

                console.warn("Something went wrong :/. Status code: " + response.status);
                return _context.abrupt("return");

              case 31:
                response.json().then(function (data) {
                  return data;
                }).then(function (data) {
                  Object.assign(_this.display, data);
                  return true;
                }).then(function (result) {
                  _this.element.appendChild(_this.composeContent(_this.display));

                  _this.element.className += _this.config.color ? " ".concat(_this.config.color) : ' default';

                  if (_this.config.compact) {
                    _this.element.firstChild.className += " lendica-finance-compact";
                  }

                  if (_this.config.animation) {
                    _this.element.className += " ribbon-drop";
                    _this.element.firstChild.className += " animate-background";
                    _this.element.firstChild.firstChild.className += "animate-color";
                  }

                  _this.initialized = true;
                });
                _context.next = 37;
                break;

              case 34:
                _context.prev = 34;
                _context.t4 = _context["catch"](24);
                console.warn("Unable to update LendicaPOD data. " + _context.t4);

              case 37:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[24, 34]]);
      }));

      function loadData(_x, _x2) {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
    /**
     * Compose and initialize the display content of the POD.
     *
     * @param {String} link
     * @param {String} href
     * @param {String} before
     * @param {String} after
     *
     * @returns {Object}
     * html node
     */

  }, {
    key: "composeContent",
    value: function composeContent() {
      var _this$display = this.display,
          link = _this$display.link,
          before = _this$display.before,
          after = _this$display.after,
          partnerSlug = _this$display.partnerSlug,
          prequalResult = _this$display.prequalResult,
          referenceCode = _this$display.referenceCode;

      if (partnerSlug) {
        this.href = "https://apply.golendica.com/".concat(this.display.partnerSlug);
      }

      if (this.config.query) {
        this.href += "/portal".concat(this.querify(this.config.query));
      }

      if (referenceCode) {
        this.href += "&reference=".concat(encodeURIComponent(referenceCode));
      }

      var newWrapper = document.createElement("div");
      newWrapper.className += "lendica-finance-content-wrapper";
      var newSpan = document.createElement("span");
      var newLink = document.createElement("a");
      newLink.textContent = link;
      newLink.href = this.href;
      newLink.setAttribute('target', '_blank');
      newLink.setAttribute('rel', 'noopener noreferrer');

      if (prequalResult) {
        before.replace('[INSERT]', this.getCurrency(prequalResult));
      }

      newSpan.appendChild(document.createTextNode(before));
      newSpan.appendChild(newLink);
      newSpan.appendChild(document.createTextNode(after));
      newSpan.normalize();
      newWrapper.appendChild(newSpan);
      return newWrapper;
    }
  }, {
    key: "querify",
    value: function querify(data) {
      if (!data || !(data instanceof Object)) {
        console.warn("Invalid or empty query data. Expected object with key value pairs.");
        return;
      }

      return "?" + Object.keys(data).map(function (key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(data[key]);
      }).join("&");
    }
    /*
    Get the encoded data and encrypt it.
    */

  }, {
    key: "encryptJson",
    value: function () {
      var _encryptJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config, key, data) {
        var encoded, encrypted;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                encoded = this.getMessageEncoding(JSON.stringify(data));
                _context2.next = 3;
                return crypto.subtle.encrypt(config, key, encoded);

              case 3:
                encrypted = _context2.sent;
                return _context2.abrupt("return", encrypted);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function encryptJson(_x3, _x4, _x5) {
        return _encryptJson.apply(this, arguments);
      }

      return encryptJson;
    }()
    /*
    Decrypt the data and decode it.
    */

  }, {
    key: "decryptJson",
    value: function () {
      var _decryptJson = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(config, key, data) {
        var decrypted, dec;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return crypto.subtle.decrypt(config, key, data);

              case 2:
                decrypted = _context3.sent;
                dec = new TextDecoder();
                return _context3.abrupt("return", JSON.parse(dec.decode(decrypted)));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function decryptJson(_x6, _x7, _x8) {
        return _decryptJson.apply(this, arguments);
      }

      return decryptJson;
    }()
    /*
    Encode data in a form we can use for the encrypt operation.
    */

  }, {
    key: "getMessageEncoding",
    value: function getMessageEncoding(data) {
      var enc = new TextEncoder();
      return enc.encode(data);
    }
    /*
    Generate an AES encryption key.
    */

  }, {
    key: "generateAES",
    value: function generateAES() {
      return crypto.subtle.generateKey({
        name: "AES-GCM",
        length: 256
      }, true, ["encrypt", "decrypt"]);
    }
    /*
    Generate an RSA encryption key pair.
    */

  }, {
    key: "generateRSA",
    value: function generateRSA() {
      return crypto.subtle.generateKey({
        name: "RSA-OAEP",
        modulusLength: 4096,
        publicExponent: new Uint8Array([1, 0, 1]),
        hash: "SHA-256"
      }, true, ['encrypt', 'decrypt']);
    }
  }, {
    key: "getCurrency",
    value: function getCurrency(number) {
      var currencyFormatter = new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: 'USD'
      });
      return currencyFormatter.format(number);
    }
  }]);

  return LendicaPOD;
}();

module.exports = LendicaPOD;
