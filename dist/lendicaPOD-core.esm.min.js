function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/*
Default config for LendicaPOD.
*/
var DefaultConfig = {
  type: 'banner',
  compact: false
};
/*
Default display content for LendicaPOD.
*/

var DefaultDisplay = {
  link: "here at Lendica",
  before: "Thinking about expansion? Working capital available ",
  after: ".",
  partnerSlug: null,
  prequalResult: null,
  referenceCode: null
};

var LendicaPOD = /*#__PURE__*/function () {
  function LendicaPOD(element, config) {
    _classCallCheck(this, LendicaPOD);

    this.element = typeof element === 'string' ? document.querySelector(element) : element;
    this.config = config ? Object.assign(DefaultConfig, config) : DefaultConfig;
    this.initialized = false;
    this.display = DefaultDisplay;
    this.href = 'https://apply.golendica.com';
  }

  _createClass(LendicaPOD, [{
    key: "init",
    value: function init() {
      if (this.initialized) {
        return;
      }

      this.loadData('https://lendica-backend-server-dev.herokuapp.com/api/pod/content', {
        // partnerDomain: window.location.hostname
        partnerDomain: "highpuritynaturalproducts.com",
        prequalData: this.config.prequal || null,
        underwritingData: this.config.underwrite || null
      });
    }
  }, {
    key: "loadData",
    value: function () {
      var _loadData = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url, payload) {
        var _this = this;

        var dataHeaders, response;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dataHeaders = new Headers();
                dataHeaders.append("Content-Type", "application/json"); // const iv = crypto.getRandomValues(new Uint8Array(12));
                // let key = await this.generateAES();
                // // console.log(await crypto.subtle.exportKey('raw', key))
                // // console.log(await crypto.subtle.exportKey('jwk', key))
                // const jwe = await this.encryptJson(
                //     {
                //         name: "AES-GCM",
                //         iv: iv
                //     },
                //     key,
                //     payload
                // );
                // // console.log(jwe);
                // const res = await this.decryptJson(
                //     {
                //         name: "AES-GCM",
                //         iv: iv
                //     },
                //     key,
                //     jwe
                // );
                // // console.log(res);

                _context.prev = 2;
                _context.next = 5;
                return fetch(url, {
                  method: 'POST',
                  headers: dataHeaders,
                  body: JSON.stringify(payload) // credentials: 'include',
                  // redirect: 'follow'

                });

              case 5:
                response = _context.sent;

                if (response.ok) {
                  _context.next = 8;
                  break;
                }

                throw new Error("Response not ok. Status code: " + response.status);

              case 8:
                response.json().then(function (data) {
                  return data;
                }).then(function (data) {
                  Object.assign(_this.display, data);
                  return true;
                }).then(function (result) {
                  _this.element.appendChild(_this.composeContent(_this.display));

                  _this.updateStyles();

                  _this.initialized = true;
                });
                _context.next = 17;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](2);
                console.warn("Unable to update LendicaPOD data. " + _context.t0);
                this.element.appendChild(this.composeContent(this.display));
                this.updateStyles();
                this.initialized = true;

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 11]]);
      }));

      function loadData(_x, _x2) {
        return _loadData.apply(this, arguments);
      }

      return loadData;
    }()
  }, {
    key: "updateStyles",
    value: function updateStyles() {
      this.element.className += this.config.color ? " ".concat(this.config.color) : ' default';

      if (this.config.compact) {
        this.element.firstChild.className += " lendica-finance-compact";
      }

      if (this.config.animation) {
        this.element.className += " ribbon-drop";
        this.element.firstChild.className += " animate-background";
        this.element.firstChild.firstChild.className += "animate-color";
      }
    }
    /**
     * Compose and initialize the display content of the POD.
     *
     * @param {String} link
     * @param {String} href
     * @param {String} before
     * @param {String} after
     *
     * @returns {Object}
     * html node
     */

  }, {
    key: "composeContent",
    value: function composeContent() {
      var _this$display = this.display,
          link = _this$display.link,
          before = _this$display.before,
          after = _this$display.after,
          partnerSlug = _this$display.partnerSlug,
          prequalResult = _this$display.prequalResult,
          referenceCode = _this$display.referenceCode;

      if (partnerSlug) {
        this.href = "https://apply.golendica.com/".concat(this.display.partnerSlug);
      }

      if (this.config.query) {
        this.href += "/portal".concat(this.querify(this.config.query));
      }

      if (referenceCode) {
        this.href += "&reference=".concat(encodeURIComponent(referenceCode));
      }

      var newWrapper = document.createElement("div");
      newWrapper.className += "lendica-finance-content-wrapper";
      var newSpan = document.createElement("span");
      var newLink = document.createElement("a");
      newLink.textContent = link;
      newLink.href = this.href;
      newLink.setAttribute('target', '_blank');
      newLink.setAttribute('rel', 'noopener noreferrer');

      if (prequalResult) {
        before.replace('[INSERT]', this.getCurrency(prequalResult));
      }

      newSpan.appendChild(document.createTextNode(before));
      newSpan.appendChild(newLink);
      newSpan.appendChild(document.createTextNode(after));
      newSpan.normalize();
      newWrapper.appendChild(newSpan);
      return newWrapper;
    }
  }, {
    key: "querify",
    value: function querify(data) {
      if (!data || !(data instanceof Object)) {
        console.warn("Invalid or empty query data. Expected object with key value pairs.");
        return;
      }

      return "?" + Object.keys(data).map(function (key) {
        return encodeURIComponent(key) + "=" + encodeURIComponent(data[key]);
      }).join("&");
    } // /*
    // Get the encoded data and encrypt it.
    // */
    // async encryptJson(config, key, data) {
    //     let encoded = this.getMessageEncoding(JSON.stringify(data));
    //     let encrypted = await crypto.subtle.encrypt(
    //         config,
    //         key,
    //         encoded
    //     );
    //     // return new Uint8Array(encrypted, 0, 5);
    //     return encrypted;
    // }
    // /*
    // Decrypt the data and decode it.
    // */
    // async decryptJson(config, key, data) {
    //     let decrypted = await crypto.subtle.decrypt(
    //         config,
    //         key,
    //         data
    //     );
    //     let dec = new TextDecoder();
    //     return JSON.parse(dec.decode(decrypted));
    // }
    // /*
    // Encode data in a form we can use for the encrypt operation.
    // */
    // getMessageEncoding(data) {
    //     let enc = new TextEncoder();
    //     return enc.encode(data);
    // }
    // /*
    // Generate an AES encryption key.
    // */
    // generateAES() {
    //     return crypto.subtle.generateKey({
    //         name: "AES-GCM",
    //         length: 256,
    //     },
    //     true,
    //     ["encrypt", "decrypt"]);
    // }
    // /*
    // Generate an RSA encryption key pair.
    // */
    // generateRSA() {
    //     return crypto.subtle.generateKey({
    //         name: "RSA-OAEP",
    //         modulusLength: 4096,
    //         publicExponent: new Uint8Array([1, 0, 1]),
    //         hash: "SHA-256"
    //     }, true, ['encrypt', 'decrypt']);
    // }
    // getCurrency(number) {
    //     const currencyFormatter = new Intl.NumberFormat('en-US', {
    //         style: 'currency',
    //         currency: 'USD'
    //     });
    //     return currencyFormatter.format(number);
    // }

  }]);

  return LendicaPOD;
}();

export default LendicaPOD;
